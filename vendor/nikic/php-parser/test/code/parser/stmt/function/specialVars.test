t present after removal');
    }

    public function testNoCloneNodes() {
        $stmts = [new Node\Stmt\Echo_([new String_('Foo'), new String_('Bar')])];

        $traverser = new NodeTraverser;

        $this->assertSame($stmts, $traverser->traverse($stmts));
    }

    /**
     * @dataProvider provideTestInvalidReturn
     */
    public function testInvalidReturn($visitor, $message) {
        $this->expectException(\LogicException::class);
        $this->expectExceptionMessage($message);

        $stmts = [new Node\Stmt\Expression(new Node\Scalar\LNumber(42))];

        $traverser = new NodeTraverser();
        $traverser->addVisitor($visitor);
        $traverser->traverse($stmts);
    }

    public function provideTestInvalidReturn() {
        $visitor1 = $this->getMockBuilder(NodeVisitor::class)->getMock();
        $visitor1->expects($this->at(1))->method('enterNode')
            ->willReturn('foobar');

        $visitor2 = $this->getMockBuilder(NodeVisitor::class)->getMock();
        $visitor2->expects($this->at(2))->method('enterNode')
            ->willReturn('foobar');

        $visitor3 = $this->getMockBuilder(NodeVisitor::class)->getMock();
        $visitor3->expects($this->at(3))->method('leaveNode')
            ->willReturn('foobar');

        $visitor4 = $this->getMockBuilder(NodeVisitor::class)->getMock();
        $visitor4->expects($this->at(4))->method('leaveNode')
